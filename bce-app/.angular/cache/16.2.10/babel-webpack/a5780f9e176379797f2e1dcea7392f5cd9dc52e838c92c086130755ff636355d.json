{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TvMazeService {\n  http;\n  apiUrl = 'http://api.tvmaze.com';\n  constructor(http) {\n    this.http = http;\n  }\n  getSeries(query) {\n    const url = `${this.apiUrl}/search/shows?q=${query}`;\n    return this.http.get(url);\n  }\n  getSeriesDetails(id) {\n    const url = `${this.apiUrl}/shows/${id}`;\n    return this.http.get(url);\n  }\n  getSeasons(id) {\n    const url = `${this.apiUrl}/shows/${id}/seasons`;\n    return this.http.get(url);\n  }\n  getEpisodes(seriesId) {\n    const url = `${this.apiUrl}/shows/${seriesId}/episodes`;\n    return this.http.get(url);\n  }\n  getEpisodeDetailsByNumber(seriesId, season, episodeNumber) {\n    const url = `${this.apiUrl}/shows/${seriesId}/episodebynumber?season=${season}&number=${episodeNumber}`;\n    return this.http.get(url);\n  }\n  getCast(id) {\n    const url = `${this.apiUrl}/shows/${id}/cast`;\n    return this.http.get(url);\n  }\n  static ɵfac = function TvMazeService_Factory(t) {\n    return new (t || TvMazeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TvMazeService,\n    factory: TvMazeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TvMazeService","http","apiUrl","constructor","getSeries","query","url","get","getSeriesDetails","id","getSeasons","getEpisodes","seriesId","getEpisodeDetailsByNumber","season","episodeNumber","getCast","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Work\\BCE-Angular-Test\\bce-app\\src\\services\\tv-maze.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TvMazeService {\n  private apiUrl = 'http://api.tvmaze.com';\n  constructor(private http: HttpClient) {}\n\n  getSeries(query: string): Observable<any> {\n    const url = `${this.apiUrl}/search/shows?q=${query}`;\n    return this.http.get(url);\n  }\n\n  getSeriesDetails(id: number): Observable<any> {\n    const url = `${this.apiUrl}/shows/${id}`;\n    return this.http.get(url);\n  }\n\n  getSeasons(id: number): Observable<any> {\n    const url = `${this.apiUrl}/shows/${id}/seasons`;\n    return this.http.get(url);\n  }\n\n  getEpisodes(seriesId: number): Observable<any> {\n    const url = `${this.apiUrl}/shows/${seriesId}/episodes`;\n    return this.http.get(url);\n  }\n\n  getEpisodeDetailsByNumber(\n    seriesId: string,\n    season: string,\n    episodeNumber: string\n  ): Observable<any> {\n    const url = `${this.apiUrl}/shows/${seriesId}/episodebynumber?season=${season}&number=${episodeNumber}`;\n    return this.http.get(url);\n  }\n\n  getCast(id: number): Observable<any> {\n    const url = `${this.apiUrl}/shows/${id}/cast`;\n    return this.http.get(url);\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,aAAa;EAEJC,IAAA;EADZC,MAAM,GAAG,uBAAuB;EACxCC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCG,SAASA,CAACC,KAAa;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,mBAAmBG,KAAK,EAAE;IACpD,OAAO,IAAI,CAACJ,IAAI,CAACM,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAE,gBAAgBA,CAACC,EAAU;IACzB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUO,EAAE,EAAE;IACxC,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAI,UAAUA,CAACD,EAAU;IACnB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUO,EAAE,UAAU;IAChD,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAK,WAAWA,CAACC,QAAgB;IAC1B,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUU,QAAQ,WAAW;IACvD,OAAO,IAAI,CAACX,IAAI,CAACM,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAO,yBAAyBA,CACvBD,QAAgB,EAChBE,MAAc,EACdC,aAAqB;IAErB,MAAMT,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUU,QAAQ,2BAA2BE,MAAM,WAAWC,aAAa,EAAE;IACvG,OAAO,IAAI,CAACd,IAAI,CAACM,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAU,OAAOA,CAACP,EAAU;IAChB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUO,EAAE,OAAO;IAC7C,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAACD,GAAG,CAAC;EAC3B;;qBApCWN,aAAa,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAbpB,aAAa;IAAAqB,OAAA,EAAbrB,aAAa,CAAAsB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}